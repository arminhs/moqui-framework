<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <!-- ========== Instance Interfaces ========== -->

    <service verb="start" noun="Instance" type="interface">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <!-- TODO some sort of status out-parameters -->
    </service>
    <service verb="stop" noun="Instance" type="interface">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <!-- TODO some sort of status out-parameters -->
    </service>
    <service verb="remove" noun="Instance" type="interface">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <!-- TODO some sort of status out-parameters -->
    </service>
    <service verb="check" noun="Instance" type="interface">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <!-- TODO some sort of status and health check out-parameters -->
    </service>

    <!-- ========== Database Interfaces ========== -->

    <service verb="create" noun="Database" type="interface">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="databaseCreated" type="Boolean"/>
            <parameter name="userCreated" type="Boolean"/>
        </out-parameters>
    </service>
    <service verb="check" noun="Database" type="interface">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="connectSuccess" type="Boolean"/>
            <parameter name="databaseExists" type="Boolean"/>
            <parameter name="userExists" type="Boolean"/>
        </out-parameters>
    </service>

    <!-- ========== AppInstance Management Services ========== -->

    <service verb="create" noun="AppInstance">
        <in-parameters>
            <parameter name="instanceImageId" required="true"/>
            <parameter name="instanceHostId"/>
            <parameter name="databaseHostId"/>
            <parameter name="hostName" required="true"/>
            <parameter name="instanceName" default="hostName.replace('.', '_')"/>
        </in-parameters>
        <out-parameters><parameter name="appInstanceId"/></out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.InstanceImage" value-field="instanceImage"/>
            <if condition="instanceImage == null"><return error="true" message="InstanceImage not found with ID ${instanceImageId}"/></if>
            <set field="imageType" from="instanceImage.imageType"/>
            <if condition="imageType == null"><return error="true" message="InstanceImageType not found for InstanceImage with ID ${instanceImageId}"/></if>

            <service-call name="create#moqui.server.instance.AppInstance" in-map="context" out-map="context"/>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>

            <set field="imageTypeEnvList" from="imageType.envs"/>
            <iterate list="imageTypeEnvList" entry="imageTypeEnv">
                <set field="envValue" from="ec.resource.expand(imageTypeEnv.envValue, '')"/>
                <service-call name="create#moqui.server.instance.AppInstanceEnv"
                        in-map="[appInstanceId:appInstanceId, envName:imageTypeEnv.envName, envValue:envValue]"/>
            </iterate>
        </actions>
    </service>

    <service verb="start" noun="AppInstance">
        <implements service="org.moqui.impl.InstanceServices.start#Instance"/>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="instanceHost" from="appInstance.instanceHost"/>
            <if condition="instanceHost == null"><return error="true" message="No InstanceHost found for AppInstance with ID ${appInstanceId}"/></if>
            <service-call name="${instanceHost.startService}" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="stop" noun="AppInstance">
        <implements service="org.moqui.impl.InstanceServices.stop#Instance"/>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="instanceHost" from="appInstance.instanceHost"/>
            <if condition="instanceHost == null"><return error="true" message="No InstanceHost found for AppInstance with ID ${appInstanceId}"/></if>
            <service-call name="${instanceHost.stopService}" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="remove" noun="AppInstance">
        <implements service="org.moqui.impl.InstanceServices.remove#Instance"/>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="instanceHost" from="appInstance.instanceHost"/>
            <if condition="instanceHost == null"><return error="true" message="No InstanceHost found for AppInstance with ID ${appInstanceId}"/></if>
            <service-call name="${instanceHost.removeService}" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="check" noun="AppInstance">
        <implements service="org.moqui.impl.InstanceServices.check#Instance"/>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="instanceHost" from="appInstance.instanceHost"/>
            <if condition="instanceHost == null"><return error="true" message="No InstanceHost found for AppInstance with ID ${appInstanceId}"/></if>
            <service-call name="${instanceHost.checkService}" in-map="context" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="AppDatabase">
        <implements service="org.moqui.impl.InstanceServices.create#Database"/>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="databaseType" from="appInstance.database?.type"/>
            <if condition="databaseType == null"><return error="true" message="No DatabaseType found for AppInstance with ID ${appInstanceId}"/></if>
            <service-call name="${databaseType.createService}" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="check" noun="AppDatabase">
        <implements service="org.moqui.impl.InstanceServices.check#Database"/>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="databaseType" from="appInstance.database?.type"/>
            <if condition="databaseType == null"><return error="true" message="No DatabaseType found for AppInstance with ID ${appInstanceId}"/></if>
            <service-call name="${databaseType.checkService}" in-map="context" out-map="context"/>
        </actions>
    </service>

    <!-- ========== Docker Management Services ========== -->

    <!-- ========== Database Management Services ========== -->

    <service verb="get" noun="AppInstanceEnv">
        <in-parameters><parameter name="appInstanceId" required="true"/></in-parameters>
        <out-parameters>
            <parameter name="envMap" type="Map"/>
            <parameter name="adminMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.server.instance.AppInstance" value-field="appInstance"/>
            <set field="databaseHost" from="appInstance.database"/>
            <set field="envList" from="appInstance.envs"/>
            <set field="envMap" from="[:]"/>
            <iterate list="envList" entry="envItem"><script>envMap.put(envItem.envName, envItem.envValue)</script></iterate>

            <set field="adminMap" from="new HashMap(envMap)"/>
            <!-- handle adminUser, adminPassword -->
            <set field="adminMap.entity_ds_user" from="databaseHost.adminUser"/>
            <set field="adminMap.entity_ds_password" from="databaseHost.adminPassword"/>

        </actions>
    </service>

    <!-- MySQL Services -->
    <service verb="check" noun="DatabaseMySQL">
        <implements service="org.moqui.impl.InstanceServices.check#Database"/>
        <actions>
            <service-call name="org.moqui.impl.InstanceServices.get#AppInstanceEnv" in-map="context" out-map="context"/>
            <!-- connect with the mysql database which is always there in MySQL -->
            <set field="adminMap.entity_ds_database" value="mysql"/>

            <script><![CDATA[
                org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("checkDatabaseMySQL")

                connectSuccess = false
                databaseExists = false
                userExists = false

                java.sql.Connection testCon = null
                try {
                    testCon = ec.entity.getConfConnection(adminMap)
                    connectSuccess = true
                } catch (Exception e) {
                    logger.warn("Test connection failed", e)
                } finally {
                    if (testCon != null) testCon.close()
                }

                if (connectSuccess) {
                    long dbCount = ec.entity.runSqlCountConf("information_schema.schemata", "schema_name='${envMap.entity_ds_database}'", adminMap)
                    if (dbCount > 0L) databaseExists = true

                    long userCount = ec.entity.runSqlCountConf("mysql.user", "user='${envMap.entity_ds_user}'", adminMap)
                    if (userCount > 0L) userExists = true
                }
            ]]></script>

            <message>Checked database ${envMap.entity_ds_database} at ${envMap.entity_ds_host}: connect ${connectSuccess ? 'successful' : 'failed'}, database ${databaseExists ? 'exists' : 'does not exist'}, user ${envMap.entity_ds_user} ${userExists ? 'exists' : 'does not exist'}</message>
        </actions>
    </service>
    <service verb="create" noun="DatabaseMySQL">
        <implements service="org.moqui.impl.InstanceServices.create#Database"/>
        <actions>
            <service-call name="org.moqui.impl.InstanceServices.get#AppInstanceEnv" in-map="context" out-map="context"/>
            <!-- connect with the mysql database which is always there in MySQL -->
            <set field="adminMap.entity_ds_database" value="mysql"/>

            <script><![CDATA[
                databaseCreated = false
                userCreated = false

                // see if database exists (SELECT * FROM information_schema.schemata WHERE schema_name='moqui')
                long dbCount = ec.entity.runSqlCountConf("information_schema.schemata", "schema_name='${envMap.entity_ds_database}'", adminMap)
                if (dbCount > 0L) {
                    ec.message.addMessage("Database ${envMap.entity_ds_database} already exists on host ${envMap.entity_ds_host}")
                } else {
                    int dbRows = ec.entity.runSqlUpdateConf("CREATE DATABASE `${envMap.entity_ds_database}` DEFAULT CHARACTER SET utf8", adminMap)
                    if (dbRows > 0) {
                        databaseCreated = true
                        ec.message.addMessage("Created database ${envMap.entity_ds_database} on host ${envMap.entity_ds_host}")
                    }
                }

                // see if user exists (SELECT * FROM mysql.user WHERE user='root')
                long userCount = ec.entity.runSqlCountConf("mysql.user", "user='${envMap.entity_ds_user}'", adminMap)
                if (userCount > 0L) {
                    ec.message.addMessage("User ${envMap.entity_ds_user} already exists on host ${envMap.entity_ds_host}")
                } else {
                    // NOTE: calling CREATE USER with IF NOT EXISTS returns an error instead of warning in MySQL 5.7.* (at least 5.7.10)
                    int userRows = ec.entity.runSqlUpdateConf("CREATE USER '${envMap.entity_ds_user}' IDENTIFIED BY '${envMap.entity_ds_password}'", adminMap)
                    if (userRows > 0) {
                        userCreated = true
                        ec.message.addMessage("Created user ${envMap.entity_ds_user} on host ${envMap.entity_ds_host}")
                    }
                }
                // NOTE: because of issue above user must already exist, often the case (using same user to access all tenant DBs; may create separate users to access only a single tenant DB)
                ec.entity.runSqlUpdateConf("GRANT ALL ON ${envMap.entity_ds_database}.* TO '${envMap.entity_ds_user}'", adminMap)
            ]]></script>
        </actions>
    </service>

</services>
